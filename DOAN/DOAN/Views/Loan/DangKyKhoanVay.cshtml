@model DOAN.Models.LoanAccount

@{
    ViewData["Title"] = "Đăng ký khoản vay mới";
}

<h2>Đăng ký khoản vay mới</h2>

<form asp-action="DangKyKhoanVay" method="post">
    <div class="form-group">
        <label>Mã khoản vay</label>
        <input type="text" id="LoanId" name="LoanId" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Mã hồ sơ vay</label>
        <!-- Cho phép người dùng nhập mã hồ sơ vay -->
        <input type="text" id="LoanProfileId" name="LoanProfileId" class="form-control" required>
    </div>

    <div class="form-group">
        <label>Tên khách hàng trên hồ sơ</label>
        <!-- Hiển thị tên khách hàng được lấy từ hồ sơ -->
        <input type="text" id="ProfileCustomerName" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Căn cước trên hồ sơ</label>
        <!-- Hiển thị căn cước được lấy từ hồ sơ -->
        <input type="text" id="ProfileCitizenId" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Mã khách hàng</label>
        <input type="text" id="CustomerId" name="CustomerId" class="form-control" required>
    </div>

    <div class="form-group">
        <label>Tên khách hàng</label>
        <input type="text" id="CustomerName" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Số dư tài khoản hiện tại</label>
        <input type="text" id="CurrentBalance" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Hạn mức vay tối đa</label>
        <input type="text" id="MaxLoanAmount" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Số tiền muốn vay</label>
        <input type="number" id="LoanAmount" name="LoanAmount" class="form-control" required>
    </div>

    <div class="form-group">
        <label>Lãi suất vay (%)</label>
        <input type="text" id="InterestRate" name="InterestRate" class="form-control" readonly>
    </div>

    <div class="form-group">
        <label>Thời hạn vay</label>
        <select id="LoanTerm" name="LoanTerm" class="form-control">
            <option value="6">6 tháng</option>
            <option value="12">12 tháng</option>
            <option value="24">24 tháng</option>
            <option value="48">48 tháng</option>
            <option value="60">60 tháng</option>
        </select>
    </div>

    <div class="form-group">
        <label>Ngày vay</label>
        <input type="date" id="LoanDate" name="CreatedAt" class="form-control">
    </div>

    <div class="form-group">
        <label>Chọn phương thức thanh toán</label>
        <select id="PaymentMethod" name="PaymentMethod" class="form-control" required>
            <option value="">-- Chọn phương thức --</option>
            <option value="Auto">Tự động trừ từ tài khoản chuyên dụng</option>
            <option value="Counter">Nộp tiền tại quầy</option>
        </select>
    </div>

    <!-- Form tài khoản chuyên dụng, ẩn ban đầu -->
    <div id="SpecialAccountForm" style="display:none; margin-top: 20px;">
        <h5>Thông tin tài khoản chuyên dụng</h5>

        <div class="form-group">
            <label>Số tài khoản</label>
            <input type="text" id="SpecialAccountNumber" name="SpecialAccountNumber" class="form-control" readonly>
        </div>

        <div class="form-group">
            <label>Chủ tài khoản</label>
            <input type="text" name="SpecialAccountHolder" class="form-control">
        </div>

        <div class="form-group">
            <label>Loại tài khoản</label>
            <input type="text" class="form-control" value="Tài khoản chuyên dụng trả lãi vay" readonly>
        </div>
    </div>


    <button type="submit" class="btn btn-primary mt-3">Tạo hồ sơ vay vốn</button>
</form>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Tạo mã khoản vay tự động
            fetch('/Loan/GenerateLoanId')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("LoanId").value = data.loanId;
                })
                .catch(error => console.error('Lỗi khi tạo mã khoản vay:', error));
        fetch('/Loan/GenerateSpecializedAccountId')
            .then(response => response.json())
            .then(data => {
                document.getElementById("SpecialAccountNumber").value = data.specializedaccountid;
            })
            .catch(error => console.error('Lỗi khi lấy mã tài khoản chuyên dụng:', error));

            // Set ngày hiện tại cho "Ngày vay"
            document.getElementById("LoanDate").value = new Date().toISOString().split('T')[0];

            // Xử lý khi thay đổi mã khách hàng để lấy thông tin khách hàng
            document.getElementById("CustomerId").addEventListener("change", function () {
                let customerId = this.value;
                fetch(`/Customer/GetThongTinByVay?maKH=${customerId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data) {
                            document.getElementById("CustomerName").value = data.tenKhachHang;
                            document.getElementById("CurrentBalance").value = data.soDu;

                            let hanMucToiDa = 0;
                            let laiSuat = 9.0; // Lãi suất mặc định

                            let isVIP = customerId.includes("V");

                            if (isVIP) {
                                if (data.soDu < 100000000) { hanMucToiDa = 80000000; laiSuat = 8.0; }
                                else if (data.soDu < 500000000) { hanMucToiDa = 400000000; laiSuat = 7.5; }
                                else if (data.soDu < 1000000000) { hanMucToiDa = 900000000; laiSuat = 7.0; }
                                else { hanMucToiDa = 1200000000; laiSuat = 6.5; }
                            } else {
                                if (data.soDu < 100000000) { hanMucToiDa = 50000000; }
                                else if (data.soDu < 500000000) { hanMucToiDa = 300000000; }
                                else if (data.soDu < 1000000000) { hanMucToiDa = 700000000; }
                                else { hanMucToiDa = 1000000000; }
                                laiSuat = 9.0;
                            }

                            let hanMucGoiY = isVIP ? data.soDu * 1.2 : data.soDu * 0.8;
                            hanMucToiDa = Math.min(hanMucToiDa, hanMucGoiY);

                            document.getElementById("MaxLoanAmount").value = hanMucToiDa;
                            document.getElementById("InterestRate").value = laiSuat;
                        }
                    })
                    .catch(error => console.error('Lỗi khi lấy thông tin khách hàng:', error));
            });

            // Hiển thị/ẩn form tài khoản chuyên dụng khi thay đổi phương thức thanh toán
            const paymentMethodSelect = document.getElementById("PaymentMethod");
            const specialAccountForm = document.getElementById("SpecialAccountForm");

            paymentMethodSelect.addEventListener("change", function () {
                specialAccountForm.style.display = this.value === "Auto" ? "block" : "none";
            });

            // Kiểm tra số tiền vay không vượt quá hạn mức khi nhập
            document.getElementById("LoanAmount").addEventListener("input", function () {
                let loanAmount = parseFloat(this.value);
                let maxLoanAmount = parseFloat(document.getElementById("MaxLoanAmount").value) || 0;
                if (loanAmount > maxLoanAmount) {
                    alert("Số tiền vay không được vượt quá hạn mức tối đa!");
                    this.value = maxLoanAmount;
                }
            });

            document.getElementById("LoanProfileId").addEventListener("change", function () {
            let loanProfileId = this.value.trim();
            if (loanProfileId !== "") {
                fetch(`/Loan/GetLoanProfileByID?loanProfileId=${loanProfileId}`)
                    .then(response => response.json())
                    .then(result => {
                        console.log(result); // Kiểm tra dữ liệu trả về
                        if (result.success && result.data && result.data.isApproved === "Đã phê duyệt") {
                            document.getElementById("ProfileCustomerName").value = result.data.customerName;
                            document.getElementById("ProfileCitizenId").value = result.data.citizenId;
                        } else {
                            alert("Hồ sơ không hợp lệ hoặc chưa được phê duyệt!");
                            document.getElementById("ProfileCustomerName").value = "";
                            document.getElementById("ProfileCitizenId").value = "";
                        }
                    })
                    .catch(error => console.error("Lỗi khi lấy thông tin hồ sơ:", error));
            }
        });

        });
    </script>
}
